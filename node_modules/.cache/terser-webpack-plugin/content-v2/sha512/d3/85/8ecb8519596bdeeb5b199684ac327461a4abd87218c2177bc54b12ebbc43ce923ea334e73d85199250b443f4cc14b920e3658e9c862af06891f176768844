{"map":"{\"version\":3,\"sources\":[\"/Users/yong/new-pictionary/not-pictionary-frontend/src/constants/index.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GamesPage.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Canvas.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/NewGuessForm.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/AnswerForm.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GuessList.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/containers/PlayerInteraction.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Timer.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/EndGame.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/containers/GameView.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Login.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/TopNav.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/App.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/serviceWorker.js\",\"/Users/yong/new-pictionary/not-pictionary-frontend/src/index.js\"],\"names\":[\"API_ROOT\",\"HEADERS\",\"Content-Type\",\"Accept\",\"GamesPage\",\"state\",\"availableGames\",\"gameName\",\"redirect\",\"currentGameId\",\"currentGameMode\",\"handleAddGames\",\"ev\",\"preventDefault\",\"playerId\",\"JSON\",\"parse\",\"localStorage\",\"getItem\",\"gameId\",\"target\",\"id\",\"fetch\",\"concat\",\"method\",\"headers\",\"body\",\"stringify\",\"then\",\"_this\",\"setState\",\"handleJoiningGame\",\"renderRedirect\",\"react_default\",\"a\",\"createElement\",\"react_router\",\"to\",\"_this2\",\"this\",\"response\",\"json\",\"_this3\",\"react\",\"className\",\"map\",\"game\",\"key\",\"value\",\"name\",\"drawer_id\",\"onClick\",\"Component\",\"Canvas\",\"props\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"intervalCanvasDraw\",\"resp\",\"i\",\"currXArray\",\"length\",\"ctx\",\"beginPath\",\"moveTo\",\"prevXArray\",\"prevYArray\",\"lineTo\",\"currYArray\",\"strokeStyle\",\"x\",\"lineWidth\",\"y\",\"stroke\",\"closePath\",\"handleMouseMoves\",\"event\",\"action\",\"persist\",\"findxy\",\"sendDrawData\",\"movement\",\"mouseAction\",\"e\",\"prevX\",\"currX\",\"prevY\",\"currY\",\"clientX\",\"canvas\",\"offsetLeft\",\"clientY\",\"offsetTop\",\"flag\",\"dot_flag\",\"fillStyle\",\"fillRect\",\"draw\",\"slice\",\"push\",\"handleClear\",\"isClear\",\"console\",\"log\",\"setTimeout\",\"window\",\"location\",\"reload\",\"canvasRef\",\"React\",\"createRef\",\"drawingFlag\",\"width\",\"height\",\"emptyArray\",\"current\",\"getContext\",\"setInterval\",\"isDrawing\",\"ref\",\"onMouseMove\",\"onMouseDown\",\"onMouseUp\",\"onMouseOut\",\"NewGuessForm\",\"onSubmit\",\"handleForm\",\"type\",\"required\",\"AnswerForm\",\"GuessList\",\"handleClick\",\"guessIdx\",\"guessAction\",\"guessText\",\"updateList\",\"guessList\",\"guesses\",\"rejectedGuesses\",\"rejectList\",\"guessValue\",\"guessInput\",\"is_won\",\"alert\",\"handleAccept\",\"isReject\",\"acc\",\"guess\",\"idx\",\"style\",\"textDecoration\",\"PlayerInteraction\",\"handleGameForms\",\"answer\",\"answerInput\",\"hideAnswerForm\",\"_JSON$stringify\",\"formType\",\"formValue\",\"defineProperty\",\"answerString\",\"components_AnswerForm\",\"components_GuessList\",\"gameOver\",\"endGame\",\"components_NewGuessForm\",\"EndGame\",\"document\",\"getElementById\",\"classList\",\"add\",\"endCondition\",\"GameView\",\"endingState\",\"is_active\",\"renderEndGame\",\"components_EndGame\",\"components_Canvas\",\"containers_PlayerInteraction\",\"Login\",\"playerName\",\"login\",\"player\",\"setItem\",\"TopNav\",\"react_router_dom\",\"activeClassName\",\"App\",\"exact\",\"path\",\"component\",\"render\",\"components_TopNav\",\"components_GamesPage\",\"containers_GameView\",\"match\",\"params\",\"Boolean\",\"hostname\",\"ReactDOM\",\"src_App_0\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"// export const API_ROOT = 'https://pictionaries.herokuapp.com/'\\nexport const API_ROOT = 'http://pictionaries.herokuapp.com/'\\n//export const API_WS_ROOT = 'ws://pictionaries.herokuapp.com/cable'\\nexport const HEADERS = {\\n  'Content-Type': 'application/json',\\n  Accept: 'application/json'\\n}\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { API_ROOT, HEADERS } from '../constants';\\nimport { Redirect } from 'react-router-dom';\\n\\nclass GamesPage extends Component {\\n  state = {\\n    availableGames: [],\\n    gameName: '',\\n    redirect: false,\\n    currentGameId: '',\\n    currentGameMode: ''\\n  }\\n\\n  componentDidMount() {\\n    // initial load of available games\\n    fetch(`${API_ROOT}/game`)\\n      .then(response => response.json())\\n      .then(json => this.setState({\\n        availableGames: json}))\\n  }\\n\\n  // add websocket listener to pull in new created games\\n\\n  handleAddGames = (ev) =>{\\n    ev.preventDefault()\\n    const playerId = JSON.parse(localStorage.getItem('playerData')).playerId\\n    const gameId = ev.target.id\\n\\n    fetch(`${API_ROOT}/game/${gameId}`, {\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify({playerId})\\n    })\\n      .then(\\n        this.setState({\\n          redirect:true,\\n          currentGameId: gameId,\\n          currentGameMode: 'draw'\\n      }))\\n\\n  }\\n\\n  handleJoiningGame = (ev) => {\\n    // post player joining game, redirect to game page\\n    const playerId = JSON.parse(localStorage.getItem('playerData')).playerId\\n    const gameId = ev.target.id\\n\\n    fetch(`${API_ROOT}/game/${gameId}`, {\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify({playerId})\\n    })\\n      .then(\\n        this.setState({\\n          redirect:true,\\n          currentGameId: gameId,\\n          currentGameMode: 'guess'\\n      }))\\n  }\\n\\n  renderRedirect = () => {\\n    if (this.state.redirect) {\\n      return <Redirect to={`/${this.state.currentGameId}/${this.state.currentGameMode}`}/>\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <Fragment>\\n        {this.renderRedirect()}\\n        {/* <form onSubmit={this.handleAddGames} >\\n          <input type='text' placeholder='New game name.' name='createGame' required/>\\n          <input type='submit' value='create game' />\\n        </form> */}\\n        <h3>Available Games:</h3>\\n        <div className='game-card-container'>\\n          {this.state.availableGames.map(game => {\\n            return (\\n              <div\\n                key={game.id}\\n                value={game}\\n                className='game-card'\\n              >\\n                <h4>Game: {game.id}</h4>\\n                <h4>Name: {game.name}</h4>\\n                <p>Drawer_Id: {game.drawer_id}</p>\\n                <button\\n                  id={game.id}\\n                  name={game.id}\\n                  onClick={this.handleJoiningGame}\\n                  className='button'\\n                >\\n                  Play as a guess role\\n                </button>\\n\\n                <button\\n                  id={game.id}\\n                  name={game.id}\\n                  onClick={this.handleAddGames}\\n                  className='button'\\n                >\\n                  Play as a draw role\\n                </button>\\n                </div>\\n              )\\n            })\\n            }\\n          </div>\\n      </Fragment>\\n    )\\n  }\\n}\\nexport default GamesPage;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { ActionCableConsumer } from 'react-actioncable-provider';\\nimport { API_ROOT, HEADERS } from '../constants';\\n// import Cable from './Cable';\\n\\n\\nclass Canvas extends React.Component {\\n  constructor (props) {\\n    super(props);\\n    this.canvasRef = React.createRef()\\n    this.state = {\\n      canvas: false,\\n      ctx: false,\\n      drawingFlag: false,\\n      prevX: 0,\\n      currX: 0,\\n      prevY: 0,\\n      currY: 0,\\n      prevXArray: [],\\n      prevYArray: [],\\n      currXArray: [],\\n      currYArray: [],\\n      dot_flag: false,\\n      x: 'black',\\n      y: 2,\\n      width: 400, // make this a prop\\n      height: 400, // make this a prop\\n      emptyArray : []\\n    }\\n  }\\n\\n  componentDidMount() {\\n    // getting ref to canvas html element w React ref, update state\\n    const canvas = this.canvasRef.current;\\n    const ctx = canvas.getContext('2d')\\n\\n    // set canvas width / height using hard-coded state\\n    canvas.width = this.state.width;\\n    canvas.height = this.state.height;\\n\\n    this.setState(\\n      {canvas, ctx},\\n      // test data to fill the canvas w a rectangle\\n      () => {\\n        this.state.ctx.fillStyle = 'lightgray';\\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\\n    )\\n     setInterval(this.intervalCanvasDraw, 4000)\\n\\n     const movement = {\\n       prevX: 1,\\n       isClear: \\\"true\\\"\\n     }\\n     fetch(API_ROOT + '/canvas/1', {\\n       method: 'PATCH',\\n       headers: HEADERS,\\n       body: JSON.stringify(movement)\\n     })\\n     .then(resp => resp.json())\\n     .then(json=>{\\n       console.log('change currentGameId', json)\\n     })\\n\\n  }\\n\\n  intervalCanvasDraw = () =>{\\n    fetch(API_ROOT +'/canvas')\\n    .then(resp => resp.json())\\n    .then(json =>{\\n      // console.log('the returned movement',json[0])\\n        for(let i=0; i < json[0].currXArray.length; i++) {\\n          this.state.ctx.beginPath();\\n          this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\\n          this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\\n          this.state.ctx.strokeStyle = this.state.x;\\n          this.state.ctx.lineWidth = this.state.y;\\n          this.state.ctx.stroke();\\n          this.state.ctx.closePath();\\n        }\\n\\n    })\\n\\n\\n  }\\n\\n  handleMouseMoves = (event, action) => {\\n    event.persist()\\n    //console.log('moving the mouse', action, event)\\n    this.findxy(action, event)\\n\\n    // if (action !== 'up') {this.sendDrawData()}\\n\\n    // post updated state to API\\n  }\\n\\n  sendDrawData = () => {\\n    const movement = {\\n      currentGameId: this.props.gameId,\\n      prevXArray: this.state.prevXArray,\\n      prevYArray: this.state.prevYArray,\\n      currXArray: this.state.currXArray,\\n      currYArray: this.state.currYArray,\\n    }\\n\\n    fetch(API_ROOT + '/canvas/1', {\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify(movement)\\n    })\\n      // .then(response)\\n  }\\n\\n  findxy = (mouseAction, e) => {\\n    if (mouseAction == 'down') {\\n      this.setState(\\n        (state) => {return {\\n          prevX: state.currX,\\n          prevY: state.currY,\\n          currX: e.clientX - state.canvas.offsetLeft,\\n          currY: e.clientY - state.canvas.offsetTop,\\n          flag: true,\\n          dot_flag: true\\n        }},\\n        () => {\\n          if (this.state.dot_flag) {\\n            this.state.ctx.beginPath();\\n            this.state.ctx.fillStyle = this.state.x;\\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\\n            this.state.ctx.closePath();\\n\\n            this.setState({dot_flag: false})\\n          }\\n        }\\n      )\\n    } else if (mouseAction == 'up') {\\n        this.setState({flag: false})\\n        this.sendDrawData()\\n\\n    } else if (mouseAction == 'move' && this.state.flag) {\\n      this.setState(\\n        (state) => {\\n          return {\\n            prevX: state.currX,\\n            prevY: state.currY,\\n            currX: e.clientX - state.canvas.offsetLeft,\\n            currY: e.clientY - state.canvas.offsetTop,\\n          }\\n        },\\n        () => {\\n          this.draw()\\n        }\\n      )\\n    }\\n  }\\n\\n  draw = () => {\\n    this.state.ctx.beginPath();\\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\\n    this.state.ctx.stroke();\\n    this.state.ctx.closePath();\\n\\n    // store all\\n    const prevXArray = this.state.prevXArray.slice()\\n    prevXArray.push(this.state.prevX)\\n    const prevYArray = this.state.prevYArray.slice()\\n    prevYArray.push(this.state.prevY)\\n    const currXArray = this.state.currXArray.slice()\\n    currXArray.push(this.state.currX)\\n    const currYArray = this.state.currYArray.slice()\\n    currYArray.push(this.state.currY)\\n\\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\\n\\n  }\\n\\n\\n  handleClear = ()=>{\\n    const movement = {\\n      prevX: 1,\\n      isClear: \\\"true\\\"\\n    }\\n    fetch(API_ROOT + '/canvas/1', {\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify(movement)\\n    })\\n    .then(resp => resp.json())\\n    .then(json=>{\\n      console.log('change currentGameId', json)\\n    })\\n\\n    setTimeout(window.location.reload(), 2000)\\n  }\\n\\n  render() {\\n    if (this.props.isDrawing) {\\n      return (\\n        <Fragment>\\n          <canvas\\n            ref={this.canvasRef}\\n            onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\\n            onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\\n            onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\\n            onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\\n          />\\n          <button onClick={this.handleClear}>ClearImage</button>\\n        </Fragment>\\n      )\\n    } else {\\n      return (\\n        <Fragment>\\n          {/* <ActionCableConsumer\\n            channel={{channel: 'CanvasDrawingsChannel', id:`${this.props.gameId}`}}\\n            onReceived={this.handleReceivedDrawing}\\n          /> */}\\n          <canvas\\n            ref={this.canvasRef}\\n          />\\n\\n        </Fragment>\\n      )\\n    }\\n\\n  }}\\n\\nexport default Canvas;\\n\",\"import React, { Component, Fragment } from 'react';\\n\\nconst NewGuessForm = (props) => {\\n\\n  return (\\n    <div>\\n      <form onSubmit={props.handleForm} name=\\\"guess\\\">\\n        <label>New Guess:\\n          <input type='text' name='guess' required />\\n        </label>\\n        <input type='submit' value='Submit' />\\n      </form>\\n    </div>\\n  )\\n}\\nexport default NewGuessForm\\n\",\"import React, { Component, Fragment } from 'react';\\n\\nconst AnswerForm = (props) =>{\\n    return(\\n      <div>\\n        <form onSubmit={props.handleForm} name='answer'>\\n          <label>Your Answer:\\n            <input type='text' name='answer'  required/>\\n          </label>\\n          <input type='submit' value='Send' />\\n        </form>\\n      </div>\\n    )\\n}\\nexport default AnswerForm\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { API_ROOT, HEADERS } from '../constants';\\nimport { ActionCableConsumer } from 'react-actioncable-provider';\\n\\nclass GuessList extends Component {\\n  constructor(props) {\\n     super(props)\\n     this.state = {\\n      guessList: [],\\n      rejectedGuesses: [],\\n      guessValue: ''\\n     }\\n   }\\n\\n  componentDidMount() {\\n    const movement = {\\n      isClear: \\\"true\\\"\\n    }\\n    fetch(API_ROOT + `/game/${this.props.gameId}`, {\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify(movement)\\n    })\\n\\n    setInterval(this.updateList, 3000)\\n   }\\n\\n  handleClick = (ev) => {\\n     // ev.persist()\\n     const guessIdx = ev.target.id\\n     const guessAction = ev.target.name\\n     const guessText = ev.target.value\\n     fetch(API_ROOT+`/game/${this.props.gameId}`,{\\n       method: 'PATCH',\\n       headers: HEADERS,\\n       body: JSON.stringify({guessIdx, guessAction, guessText})\\n     })\\n\\n   }\\n\\n   updateList = ()=>{\\n     fetch(API_ROOT+`/game/${this.props.gameId}`)\\n     .then(resp => resp.json())\\n     .then(json =>{\\n       this.setState({\\n         guessList: json.guesses,\\n         rejectedGuesses: json.rejectList,\\n         guessValue: json.guessInput\\n       })\\n       if(json.is_won){\\n         alert('We have a winner, thank you for playing.')\\n         window.location = 'http://localhost:3000/games'\\n       }\\n     })\\n   }\\n\\n   handleAccept = (ev) =>{\\n\\n     const isReject = true\\n     // const guessIdx = ev.target.id\\n     const guessAction = ev.target.name\\n     fetch(API_ROOT+`/game/${this.props.gameId}`,{\\n       method: 'PATCH',\\n       headers: HEADERS,\\n       body: JSON.stringify({isReject, guessAction})\\n     })\\n\\n   }\\n\\n\\n  render() {\\n    if (this.props.isDrawing) {\\n      this.acc || (this.acc = null)\\n      return (\\n        <Fragment>\\n          {this.acc}\\n          <h4>Guess List</h4>\\n          <ul>\\n            {this.state.guessList.map((guess, idx) => {\\n              return (\\n                <li key={idx}>{guess}\\n                  <button\\n                    id={idx}\\n                    name='Accept'\\n                    onClick={this.handleAccept}\\n                    value={guess}\\n                  >\\n                    Accept\\n                  </button>\\n                  <button\\n                    id={idx}\\n                    name='Reject'\\n                    onClick={this.handleClick}\\n                    value={guess}\\n                  >\\n                    Reject\\n                  </button>\\n                </li>\\n              )})\\n            }\\n          </ul>\\n        </Fragment>\\n      )\\n    } else {\\n      this.acc || (this.acc = null)\\n      return (\\n        <Fragment>\\n          {this.acc}\\n          <h4>Rejected Guess List</h4>\\n          <ul>\\n            {this.state.rejectedGuesses.map((guess, idx) => {\\n              return <li key={idx} style={{textDecoration: 'line-through'}}>{guess}</li>\\n              })}\\n          </ul>\\n        </Fragment>\\n      )\\n    }\\n  }\\n}\\n\\nexport default GuessList\\n\",\"import React, { Component, Fragment } from 'react';\\nimport NewGuessForm from '../components/NewGuessForm';\\nimport AnswerForm from '../components/AnswerForm';\\nimport GuessList from '../components/GuessList';\\nimport { API_ROOT, HEADERS } from '../constants';\\nimport Timer from '../components/Timer';\\n\\nclass PlayerInteraction extends Component{\\n\\n  constructor(){\\n    super()\\n    this.state={\\n      answerInput: '',\\n      hideAnswerForm: false,\\n      answerString: \\\"Your Answer: \\\"\\n    }\\n  }\\n\\n  handleGameForms = (ev) => {\\n    ev.preventDefault()\\n    if(ev.target.name === \\\"answer\\\"){\\n      console.log(\\\"answerForm check\\\", ev.target.answer.value)\\n      //triggers the timer channel\\n      //timer channel ends\\n      this.setState({\\n        answerInput: ev.target.answer.value,\\n        hideAnswerForm: true\\n      })\\n    }\\n    else{\\n      const formType = ev.target.name\\n      const formValue = ev.target[formType].value\\n      const playerId = JSON.parse(localStorage.getItem('playerData')).playerId\\n      const type = 'form'\\n      const guessInput = ev.target.guess.value\\n      fetch(API_ROOT+`/game/${this.props.gameId}`, {\\n        method: 'PATCH',\\n        headers: HEADERS,\\n        body: JSON.stringify({[formType]: formValue, playerId, type, guessInput})\\n      })\\n    }\\n  }\\n\\nrender(){\\n  if (this.props.isDrawing) {\\n    return (\\n      <Fragment>\\n        {\\n          this.state.hideAnswerForm ?\\n            <div>{this.state.answerString} <strong>{this.state.answerInput}</strong></div> :\\n            <AnswerForm handleForm={this.handleGameForms}/>\\n        }\\n\\n        <GuessList\\n          gameId={this.props.gameId}\\n          isDrawing={this.props.isDrawing}\\n          gameOver={this.props.gameOver}\\n          endGame={this.props.endGame}\\n        />\\n      </Fragment>\\n    )\\n  }\\n  else {\\n    return (\\n      <Fragment>\\n        <NewGuessForm handleForm={this.handleGameForms}/>\\n        <GuessList\\n          gameId={this.props.gameId}\\n          isDrawing={this.props.isDrawing}\\n          gameOver={this.props.gameOver}\\n          endGame={this.props.endGame}\\n        />\\n      </Fragment>\\n    )\\n  }\\n}\\n\\n}\\n\\nexport default PlayerInteraction;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { API_ROOT, HEADERS } from '../constants';\\nimport { ActionCableConsumer } from 'react-actioncable-provider';\\n\\nclass Timer extends Component{\\n  state={\\n    seconds: 59,\\n    minutes: 1,\\n    interval: ''\\n  }\\n\\n  startTimer = (e)=>{\\n    this.state.interval = setInterval(this.timer, 1000)\\n    // let clickedButton = this.refs.timerButton\\n    // clickedButton.disabled = true;\\n    console.log('checkStartTimer')\\n    const timer = {\\n      currentGameId: this.props.gameId\\n    }\\n    fetch(API_ROOT + '/timer', {\\n      method: 'POST',\\n      headers: HEADERS,\\n      body: JSON.stringify(timer)\\n    })\\n  }\\n\\n\\n  timer = ()=>{\\n    let tempSeconds = this.state.seconds\\n    if(this.state.minutes >-1){\\n      this.setState({\\n        seconds: tempSeconds -1\\n      })\\n    }\\n    else{\\n      this.setState({\\n        seconds: 0,\\n        minutes: 0\\n      })\\n\\n      // setTimeout(alert(\\\"Time's Up, Click 'Ok' to end the game\\\"), 3000)\\n      clearInterval(this.state.interval)\\n      // window.location = 'http://localhost:3001/games'\\n    }\\n\\n    if(this.state.seconds === 0){\\n      let tempMinutes = this.state.minutes\\n      this.setState({\\n        seconds: 59,\\n        minutes: tempMinutes -1\\n\\n      })\\n    }\\n  }\\n\\n  render(){\\n    if(this.props.withButton){\\n      return(\\n        <>\\n\\n          <div id=\\\"timerBox\\\">Timer: {this.state.minutes} : {this.state.seconds}\\n\\n          </div>\\n        </>\\n      )\\n    }\\n    else {\\n      return(\\n        <>\\n\\n          <div id=\\\"timerBox\\\">Timer: {this.state.minutes} : {this.state.seconds}\\n          </div>\\n        </>\\n      )\\n    }\\n\\n  }\\n}\\n\\nexport default Timer;\\n\",\"import React, { Component, Fragment } from 'react';\\n\\nconst EndGame = (props) => {\\n  const rootElmt = document.getElementById('root').classList.add('body-opacity')\\n\\n  if (props.endCondition === 'timeUp') {\\n    return (\\n      <div className='endGame'>\\n        <h3>Game Over!</h3>\\n        <h5>You ran out of time.</h5>\\n      </div>\\n    )\\n  } else if (props.endCondition === 'rightAnswer') {\\n    return (\\n      <div className='endGame'>\\n        <h3>You won! Great job!</h3>\\n        {/* <h5>You ran out of time.</h5> */}\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default EndGame;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { API_ROOT, HEADERS } from '../constants';\\nimport { ActionCableConsumer } from 'react-actioncable-provider';\\nimport { Redirect } from 'react-router-dom';\\nimport Canvas from '../components/Canvas';\\nimport PlayerInteraction from './PlayerInteraction'\\nimport Timer from '../components/Timer'\\nimport EndGame from '../components/EndGame'\\n\\n\\nclass GameView extends Component {\\n  constructor(props) {\\n    super(props)\\n    this.state = {\\n      gameOver: false,\\n      redirect: false,\\n      endCondition: ''\\n    }\\n  }\\n\\n  endGame = (endCondition) => {\\n    console.log('end game')\\n    this.setState({gameOver: true, endCondition})\\n    // patch to game/:id to change isAvailable to false, isWon to false/true\\n    let endingState = {is_active: false, endCondition}\\n\\n    if (endCondition === 'timeUp') {\\n      endingState.is_won = false\\n      // alert(`Game Over. You ran out of time!`)\\n    } else if (endCondition === 'rightAnswer') {\\n      endingState.is_won = true\\n      // alert(`You win!`)\\n    }\\n\\n    fetch(API_ROOT+`/game/${this.props.gameId}`,{\\n      method: 'PATCH',\\n      headers: HEADERS,\\n      body: JSON.stringify(endingState)\\n    })\\n      .then()\\n      .then()\\n\\n  }\\n\\n  renderRedirect = () => {\\n    if (this.state.redirect) {\\n      return <Redirect to='/games'/>\\n    }\\n  }\\n\\n  renderEndGame = () => {\\n    if (this.state.gameOver) {\\n      return <EndGame endCondition={this.state.endCondition}/>\\n    }\\n  }\\n\\n  render() {\\n    if (this.props.isDrawing) {\\n      return (\\n        <div className='gameContainer'>\\n          {/* {this.renderRedirect()} */}\\n          {this.renderEndGame()}\\n          <h2>You are... Drawing</h2>\\n\\n            <Canvas gameId={this.props.gameId} isDrawing={true}/>\\n            <PlayerInteraction\\n              gameId={this.props.gameId}\\n              isDrawing={true}\\n              gameOver={this.state.gameOver}\\n              endGame={this.endGame}\\n            />\\n            </div>\\n            )\\n            }\\n            else {\\n              return (\\n                <div className='gameContainer'>\\n                  {this.renderEndGame()}\\n                  <h2>You are... Guessing</h2>\\n\\n          <Canvas gameId={this.props.gameId} isDrawing={false} />\\n          <PlayerInteraction\\n            gameId={this.props.gameId}\\n            isDrawing={false}\\n            endGame={this.endGame}\\n          />\\n        </div>\\n      )\\n    }\\n  }\\n}\\nexport default GameView;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { Redirect } from 'react-router-dom';\\nimport { API_ROOT, HEADERS } from '../constants';\\n\\nclass Login extends Component {\\n  state = {\\n    playerName: '',\\n    playerId: '',\\n    redirect: false\\n  }\\n\\n  handleForm = (ev) => {\\n    ev.preventDefault()\\n    console.log('logging in', ev.target.login.value)\\n\\n    let name = ev.target.login.value\\n\\n    fetch(`${API_ROOT}/player`, {\\n      method: 'POST',\\n      headers: HEADERS,\\n      body: JSON.stringify({name})\\n    })\\n      .then(response => response.json())\\n      .then(json => {\\n        const player = {name: json.name, id: json.id}\\n        console.log('before setting state')\\n        this.setState({\\n          playerName: player.name,\\n          playerId: player.id,\\n          redirect: true\\n        })\\n      })\\n  }\\n\\n  renderRedirect = () => {\\n    if (this.state.redirect) {\\n      localStorage.setItem('playerData', JSON.stringify(this.state))\\n      return <Redirect to='/games'/>\\n    }\\n  }\\n\\n  render() {\\n    return (\\n      <div className='login'>\\n        {this.renderRedirect()}\\n        <h1>Welcome to Not-Pictionary Online</h1>\\n        <h4><em>Draw with your friends... or strangers!</em></h4>\\n        <form onSubmit={this.handleForm}>\\n          <label>Player Name:\\n            <input type='text' name='login' required/>\\n          </label>\\n          <input type='submit' value='Play!' />\\n        </form>\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default Login;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport { NavLink } from 'react-router-dom';\\n\\nconst TopNav = () => {\\n  return (\\n    <nav className='topNav'>\\n      <ul className='navMenu'>\\n        <li><NavLink to='/games' activeClassName='active'>All Games</NavLink></li>\\n        <li><NavLink to='/' activeClassName='active'>Log-out</NavLink></li>\\n      </ul>\\n      <h2>Not-Pictionary Online</h2>\\n    </nav>\\n  )\\n}\\n\\nexport default TopNav;\\n\",\"import React, { Component, Fragment } from 'react';\\nimport './App.css';\\nimport {BrowserRouter as Router, Route, NavLink} from 'react-router-dom';\\nimport GamesPage from './components/GamesPage';\\nimport GameView from './containers/GameView'\\nimport Login from './components/Login'\\nimport TopNav from './components/TopNav'\\n\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <Fragment>\\n      <Router>\\n        <Route exact path=\\\"/\\\" component={Login}/>\\n        <Route\\n          exact path=\\\"/games\\\"\\n          // component={GamesPage}\\n          render={() => (\\n            <Fragment>\\n              <TopNav />\\n              <GamesPage />\\n            </Fragment>\\n          )}\\n        />\\n        <Route\\n          exact path=\\\"/:id/draw\\\"\\n          render={(props)=> (\\n            <Fragment>\\n              <TopNav />\\n              <GameView gameId={props.match.params.id} isDrawing = {true}/>\\n            </Fragment>\\n          )}\\n        />\\n        <Route\\n          exact path=\\\"/:id/guess\\\"\\n          render={(props) => (\\n            <Fragment>\\n              <TopNav />\\n              <GameView gameId={props.match.params.id} isDrawing = {false}/>\\n            </Fragment>\\n          )}\\n        />\\n      </Router>\\n      </Fragment>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\n\\n// import registerServiceWorker from './registerServiceWorker';\\nimport { API_WS_ROOT } from './constants';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(\\n    <App />,\\n  document.getElementById('root')\\n);\\n\\n// registerServiceWorker();\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{28:function(e,t,a){e.exports=a(53)},33:function(e,t,a){},34:function(e,t,a){},53:function(e,t,a){\"use strict\";a.r(t);var n=a(0),r=a.n(n),c=a(25),s=a.n(c),i=(a(33),a(2)),l=a(3),o=a(5),u=a(4),m=a(6),d=(a(34),a(10)),h=a(11),g=\"http://pictionaries.herokuapp.com/\",p={\"Content-Type\":\"application/json\",Accept:\"application/json\"},f=function(e){function t(){var e,a;Object(i.a)(this,t);for(var n=arguments.length,c=new Array(n),s=0;s<n;s++)c[s]=arguments[s];return(a=Object(o.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(c)))).state={availableGames:[],gameName:\"\",redirect:!1,currentGameId:\"\",currentGameMode:\"\"},a.handleAddGames=function(e){e.preventDefault();var t=JSON.parse(localStorage.getItem(\"playerData\")).playerId,n=e.target.id;fetch(\"\".concat(g,\"/game/\").concat(n),{method:\"PATCH\",headers:p,body:JSON.stringify({playerId:t})}).then(a.setState({redirect:!0,currentGameId:n,currentGameMode:\"draw\"}))},a.handleJoiningGame=function(e){var t=JSON.parse(localStorage.getItem(\"playerData\")).playerId,n=e.target.id;fetch(\"\".concat(g,\"/game/\").concat(n),{method:\"PATCH\",headers:p,body:JSON.stringify({playerId:t})}).then(a.setState({redirect:!0,currentGameId:n,currentGameMode:\"guess\"}))},a.renderRedirect=function(){if(a.state.redirect)return r.a.createElement(h.a,{to:\"/\".concat(a.state.currentGameId,\"/\").concat(a.state.currentGameMode)})},a}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"\".concat(g,\"/game\")).then(function(e){return e.json()}).then(function(t){return e.setState({availableGames:t})})}},{key:\"render\",value:function(){var e=this;return r.a.createElement(n.Fragment,null,this.renderRedirect(),r.a.createElement(\"h3\",null,\"Available Games:\"),r.a.createElement(\"div\",{className:\"game-card-container\"},this.state.availableGames.map(function(t){return r.a.createElement(\"div\",{key:t.id,value:t,className:\"game-card\"},r.a.createElement(\"h4\",null,\"Game: \",t.id),r.a.createElement(\"h4\",null,\"Name: \",t.name),r.a.createElement(\"p\",null,\"Drawer_Id: \",t.drawer_id),r.a.createElement(\"button\",{id:t.id,name:t.id,onClick:e.handleJoiningGame,className:\"button\"},\"Play as a guess role\"),r.a.createElement(\"button\",{id:t.id,name:t.id,onClick:e.handleAddGames,className:\"button\"},\"Play as a draw role\"))})))}}]),t}(n.Component),v=(a(14),function(e){function t(e){var a;return Object(i.a)(this,t),(a=Object(o.a)(this,Object(u.a)(t).call(this,e))).intervalCanvasDraw=function(){fetch(g+\"/canvas\").then(function(e){return e.json()}).then(function(e){for(var t=0;t<e[0].currXArray.length;t++)a.state.ctx.beginPath(),a.state.ctx.moveTo(e[0].prevXArray[t],e[0].prevYArray[t]),a.state.ctx.lineTo(e[0].currXArray[t],e[0].currYArray[t]),a.state.ctx.strokeStyle=a.state.x,a.state.ctx.lineWidth=a.state.y,a.state.ctx.stroke(),a.state.ctx.closePath()})},a.handleMouseMoves=function(e,t){e.persist(),a.findxy(t,e)},a.sendDrawData=function(){var e={currentGameId:a.props.gameId,prevXArray:a.state.prevXArray,prevYArray:a.state.prevYArray,currXArray:a.state.currXArray,currYArray:a.state.currYArray};fetch(g+\"/canvas/1\",{method:\"PATCH\",headers:p,body:JSON.stringify(e)})},a.findxy=function(e,t){\"down\"==e?a.setState(function(e){return{prevX:e.currX,prevY:e.currY,currX:t.clientX-e.canvas.offsetLeft,currY:t.clientY-e.canvas.offsetTop,flag:!0,dot_flag:!0}},function(){a.state.dot_flag&&(a.state.ctx.beginPath(),a.state.ctx.fillStyle=a.state.x,a.state.ctx.fillRect(a.state.currX,a.state.currY,2,2),a.state.ctx.closePath(),a.setState({dot_flag:!1}))}):\"up\"==e?(a.setState({flag:!1}),a.sendDrawData()):\"move\"==e&&a.state.flag&&a.setState(function(e){return{prevX:e.currX,prevY:e.currY,currX:t.clientX-e.canvas.offsetLeft,currY:t.clientY-e.canvas.offsetTop}},function(){a.draw()})},a.draw=function(){a.state.ctx.beginPath(),a.state.ctx.moveTo(a.state.prevX,a.state.prevY),a.state.ctx.lineTo(a.state.currX,a.state.currY),a.state.ctx.strokeStyle=a.state.x,a.state.ctx.lineWidth=a.state.y,a.state.ctx.stroke(),a.state.ctx.closePath();var e=a.state.prevXArray.slice();e.push(a.state.prevX);var t=a.state.prevYArray.slice();t.push(a.state.prevY);var n=a.state.currXArray.slice();n.push(a.state.currX);var r=a.state.currYArray.slice();r.push(a.state.currY),a.setState({prevXArray:e,prevYArray:t,currXArray:n,currYArray:r})},a.handleClear=function(){fetch(g+\"/canvas/1\",{method:\"PATCH\",headers:p,body:JSON.stringify({prevX:1,isClear:\"true\"})}).then(function(e){return e.json()}).then(function(e){console.log(\"change currentGameId\",e)}),setTimeout(window.location.reload(),2e3)},a.canvasRef=r.a.createRef(),a.state={canvas:!1,ctx:!1,drawingFlag:!1,prevX:0,currX:0,prevY:0,currY:0,prevXArray:[],prevYArray:[],currXArray:[],currYArray:[],dot_flag:!1,x:\"black\",y:2,width:400,height:400,emptyArray:[]},a}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){var e=this,t=this.canvasRef.current,a=t.getContext(\"2d\");t.width=this.state.width,t.height=this.state.height,this.setState({canvas:t,ctx:a},function(){e.state.ctx.fillStyle=\"lightgray\",e.state.ctx.fillRect(20,20,e.state.canvas.width,e.state.canvas.height)}),setInterval(this.intervalCanvasDraw,4e3);fetch(g+\"/canvas/1\",{method:\"PATCH\",headers:p,body:JSON.stringify({prevX:1,isClear:\"true\"})}).then(function(e){return e.json()}).then(function(e){console.log(\"change currentGameId\",e)})}},{key:\"render\",value:function(){var e=this;return this.props.isDrawing?r.a.createElement(n.Fragment,null,r.a.createElement(\"canvas\",{ref:this.canvasRef,onMouseMove:function(t){return e.handleMouseMoves(t,\"move\")},onMouseDown:function(t){return e.handleMouseMoves(t,\"down\")},onMouseUp:function(t){return e.handleMouseMoves(t,\"up\")},onMouseOut:function(t){return e.handleMouseMoves(t,\"out\")}}),r.a.createElement(\"button\",{onClick:this.handleClear},\"ClearImage\")):r.a.createElement(n.Fragment,null,r.a.createElement(\"canvas\",{ref:this.canvasRef}))}}]),t}(r.a.Component)),y=a(13),E=function(e){return r.a.createElement(\"div\",null,r.a.createElement(\"form\",{onSubmit:e.handleForm,name:\"guess\"},r.a.createElement(\"label\",null,\"New Guess:\",r.a.createElement(\"input\",{type:\"text\",name:\"guess\",required:!0})),r.a.createElement(\"input\",{type:\"submit\",value:\"Submit\"})))},b=function(e){return r.a.createElement(\"div\",null,r.a.createElement(\"form\",{onSubmit:e.handleForm,name:\"answer\"},r.a.createElement(\"label\",null,\"Your Answer:\",r.a.createElement(\"input\",{type:\"text\",name:\"answer\",required:!0})),r.a.createElement(\"input\",{type:\"submit\",value:\"Send\"})))},w=function(e){function t(e){var a;return Object(i.a)(this,t),(a=Object(o.a)(this,Object(u.a)(t).call(this,e))).handleClick=function(e){var t=e.target.id,n=e.target.name,r=e.target.value;fetch(g+\"/game/\".concat(a.props.gameId),{method:\"PATCH\",headers:p,body:JSON.stringify({guessIdx:t,guessAction:n,guessText:r})})},a.updateList=function(){fetch(g+\"/game/\".concat(a.props.gameId)).then(function(e){return e.json()}).then(function(e){a.setState({guessList:e.guesses,rejectedGuesses:e.rejectList,guessValue:e.guessInput}),e.is_won&&(alert(\"We have a winner, thank you for playing.\"),window.location=\"http://localhost:3000/games\")})},a.handleAccept=function(e){var t=e.target.name;fetch(g+\"/game/\".concat(a.props.gameId),{method:\"PATCH\",headers:p,body:JSON.stringify({isReject:!0,guessAction:t})})},a.state={guessList:[],rejectedGuesses:[],guessValue:\"\"},a}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"componentDidMount\",value:function(){fetch(g+\"/game/\".concat(this.props.gameId),{method:\"PATCH\",headers:p,body:JSON.stringify({isClear:\"true\"})}),setInterval(this.updateList,3e3)}},{key:\"render\",value:function(){var e=this;return this.props.isDrawing?(this.acc||(this.acc=null),r.a.createElement(n.Fragment,null,this.acc,r.a.createElement(\"h4\",null,\"Guess List\"),r.a.createElement(\"ul\",null,this.state.guessList.map(function(t,a){return r.a.createElement(\"li\",{key:a},t,r.a.createElement(\"button\",{id:a,name:\"Accept\",onClick:e.handleAccept,value:t},\"Accept\"),r.a.createElement(\"button\",{id:a,name:\"Reject\",onClick:e.handleClick,value:t},\"Reject\"))})))):(this.acc||(this.acc=null),r.a.createElement(n.Fragment,null,this.acc,r.a.createElement(\"h4\",null,\"Rejected Guess List\"),r.a.createElement(\"ul\",null,this.state.rejectedGuesses.map(function(e,t){return r.a.createElement(\"li\",{key:t,style:{textDecoration:\"line-through\"}},e)}))))}}]),t}(n.Component),O=(n.Component,function(e){function t(){var e;return Object(i.a)(this,t),(e=Object(o.a)(this,Object(u.a)(t).call(this))).handleGameForms=function(t){if(t.preventDefault(),\"answer\"===t.target.name)console.log(\"answerForm check\",t.target.answer.value),e.setState({answerInput:t.target.answer.value,hideAnswerForm:!0});else{var a,n=t.target.name,r=t.target[n].value,c=JSON.parse(localStorage.getItem(\"playerData\")).playerId,s=t.target.guess.value;fetch(g+\"/game/\".concat(e.props.gameId),{method:\"PATCH\",headers:p,body:JSON.stringify((a={},Object(y.a)(a,n,r),Object(y.a)(a,\"playerId\",c),Object(y.a)(a,\"type\",\"form\"),Object(y.a)(a,\"guessInput\",s),a))})}},e.state={answerInput:\"\",hideAnswerForm:!1,answerString:\"Your Answer: \"},e}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return this.props.isDrawing?r.a.createElement(n.Fragment,null,this.state.hideAnswerForm?r.a.createElement(\"div\",null,this.state.answerString,\" \",r.a.createElement(\"strong\",null,this.state.answerInput)):r.a.createElement(b,{handleForm:this.handleGameForms}),r.a.createElement(w,{gameId:this.props.gameId,isDrawing:this.props.isDrawing,gameOver:this.props.gameOver,endGame:this.props.endGame})):r.a.createElement(n.Fragment,null,r.a.createElement(E,{handleForm:this.handleGameForms}),r.a.createElement(w,{gameId:this.props.gameId,isDrawing:this.props.isDrawing,gameOver:this.props.gameOver,endGame:this.props.endGame}))}}]),t}(n.Component)),j=function(e){document.getElementById(\"root\").classList.add(\"body-opacity\");return\"timeUp\"===e.endCondition?r.a.createElement(\"div\",{className:\"endGame\"},r.a.createElement(\"h3\",null,\"Game Over!\"),r.a.createElement(\"h5\",null,\"You ran out of time.\")):\"rightAnswer\"===e.endCondition?r.a.createElement(\"div\",{className:\"endGame\"},r.a.createElement(\"h3\",null,\"You won! Great job!\")):void 0},A=function(e){function t(e){var a;return Object(i.a)(this,t),(a=Object(o.a)(this,Object(u.a)(t).call(this,e))).endGame=function(e){console.log(\"end game\"),a.setState({gameOver:!0,endCondition:e});var t={is_active:!1,endCondition:e};\"timeUp\"===e?t.is_won=!1:\"rightAnswer\"===e&&(t.is_won=!0),fetch(g+\"/game/\".concat(a.props.gameId),{method:\"PATCH\",headers:p,body:JSON.stringify(t)}).then().then()},a.renderRedirect=function(){if(a.state.redirect)return r.a.createElement(h.a,{to:\"/games\"})},a.renderEndGame=function(){if(a.state.gameOver)return r.a.createElement(j,{endCondition:a.state.endCondition})},a.state={gameOver:!1,redirect:!1,endCondition:\"\"},a}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return this.props.isDrawing?r.a.createElement(\"div\",{className:\"gameContainer\"},this.renderEndGame(),r.a.createElement(\"h2\",null,\"You are... Drawing\"),r.a.createElement(v,{gameId:this.props.gameId,isDrawing:!0}),r.a.createElement(O,{gameId:this.props.gameId,isDrawing:!0,gameOver:this.state.gameOver,endGame:this.endGame})):r.a.createElement(\"div\",{className:\"gameContainer\"},this.renderEndGame(),r.a.createElement(\"h2\",null,\"You are... Guessing\"),r.a.createElement(v,{gameId:this.props.gameId,isDrawing:!1}),r.a.createElement(O,{gameId:this.props.gameId,isDrawing:!1,endGame:this.endGame}))}}]),t}(n.Component),I=function(e){function t(){var e,a;Object(i.a)(this,t);for(var n=arguments.length,c=new Array(n),s=0;s<n;s++)c[s]=arguments[s];return(a=Object(o.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(c)))).state={playerName:\"\",playerId:\"\",redirect:!1},a.handleForm=function(e){e.preventDefault(),console.log(\"logging in\",e.target.login.value);var t=e.target.login.value;fetch(\"\".concat(g,\"/player\"),{method:\"POST\",headers:p,body:JSON.stringify({name:t})}).then(function(e){return e.json()}).then(function(e){var t={name:e.name,id:e.id};console.log(\"before setting state\"),a.setState({playerName:t.name,playerId:t.id,redirect:!0})})},a.renderRedirect=function(){if(a.state.redirect)return localStorage.setItem(\"playerData\",JSON.stringify(a.state)),r.a.createElement(h.a,{to:\"/games\"})},a}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"login\"},this.renderRedirect(),r.a.createElement(\"h1\",null,\"Welcome to Not-Pictionary Online\"),r.a.createElement(\"h4\",null,r.a.createElement(\"em\",null,\"Draw with your friends... or strangers!\")),r.a.createElement(\"form\",{onSubmit:this.handleForm},r.a.createElement(\"label\",null,\"Player Name:\",r.a.createElement(\"input\",{type:\"text\",name:\"login\",required:!0})),r.a.createElement(\"input\",{type:\"submit\",value:\"Play!\"})))}}]),t}(n.Component),G=function(){return r.a.createElement(\"nav\",{className:\"topNav\"},r.a.createElement(\"ul\",{className:\"navMenu\"},r.a.createElement(\"li\",null,r.a.createElement(d.b,{to:\"/games\",activeClassName:\"active\"},\"All Games\")),r.a.createElement(\"li\",null,r.a.createElement(d.b,{to:\"/\",activeClassName:\"active\"},\"Log-out\"))),r.a.createElement(\"h2\",null,\"Not-Pictionary Online\"))},C=function(e){function t(){return Object(i.a)(this,t),Object(o.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return r.a.createElement(n.Fragment,null,r.a.createElement(d.a,null,r.a.createElement(h.b,{exact:!0,path:\"/\",component:I}),r.a.createElement(h.b,{exact:!0,path:\"/games\",render:function(){return r.a.createElement(n.Fragment,null,r.a.createElement(G,null),r.a.createElement(f,null))}}),r.a.createElement(h.b,{exact:!0,path:\"/:id/draw\",render:function(e){return r.a.createElement(n.Fragment,null,r.a.createElement(G,null),r.a.createElement(A,{gameId:e.match.params.id,isDrawing:!0}))}}),r.a.createElement(h.b,{exact:!0,path:\"/:id/guess\",render:function(e){return r.a.createElement(n.Fragment,null,r.a.createElement(G,null),r.a.createElement(A,{gameId:e.match.params.id,isDrawing:!1}))}})))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(C,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[28,1,2]]]);","extractedComments":[]}