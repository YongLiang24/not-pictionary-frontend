{"ast":null,"code":"import _classCallCheck from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Canvas.js\";\nimport React, { Component, Fragment } from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT, HEADERS } from '../constants'; // import Cable from './Cable';\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Canvas, _React$Component);\n\n  function Canvas(props) {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Canvas).call(this, props));\n\n    _this.handleMouseMoves = function (event, action) {\n      event.persist(); //console.log('moving the mouse', action, event)\n\n      _this.findxy(action, event); // if (action !== 'up') {this.sendDrawData()}\n      // post updated state to API\n\n    };\n\n    _this.sendDrawData = function () {\n      var movement = {\n        currentGameId: _this.props.gameId,\n        prevXArray: _this.state.prevXArray,\n        prevYArray: _this.state.prevYArray,\n        currXArray: _this.state.currXArray,\n        currYArray: _this.state.currYArray\n      };\n      fetch(API_ROOT + '/canvas', {\n        method: 'POST',\n        headers: HEADERS,\n        body: JSON.stringify(movement)\n      }); // .then(response)\n    };\n\n    _this.findxy = function (mouseAction, e) {\n      if (mouseAction == 'down') {\n        _this.setState(function (state) {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n            flag: true,\n            dot_flag: true\n          };\n        }, function () {\n          if (_this.state.dot_flag) {\n            _this.state.ctx.beginPath();\n\n            _this.state.ctx.fillStyle = _this.state.x;\n\n            _this.state.ctx.fillRect(_this.state.currX, _this.state.currY, 2, 2);\n\n            _this.state.ctx.closePath();\n\n            _this.setState({\n              dot_flag: false\n            });\n          }\n        });\n      } else if (mouseAction == 'up' || mouseAction == \"out\") {\n        _this.setState({\n          flag: false\n        });\n\n        _this.sendDrawData();\n      } else if (mouseAction == 'move' && _this.state.flag) {\n        _this.setState(function (state) {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop\n          };\n        }, function () {\n          _this.draw();\n        });\n      }\n    };\n\n    _this.draw = function () {\n      _this.state.ctx.beginPath();\n\n      _this.state.ctx.moveTo(_this.state.prevX, _this.state.prevY);\n\n      _this.state.ctx.lineTo(_this.state.currX, _this.state.currY);\n\n      _this.state.ctx.strokeStyle = _this.state.x; // update to not mutate state directly\n\n      _this.state.ctx.lineWidth = _this.state.y; // update to not mutate state directly\n\n      _this.state.ctx.stroke();\n\n      _this.state.ctx.closePath(); // store all\n\n\n      var prevXArray = _this.state.prevXArray.slice();\n\n      prevXArray.push(_this.state.prevX);\n\n      var prevYArray = _this.state.prevYArray.slice();\n\n      prevYArray.push(_this.state.prevY);\n\n      var currXArray = _this.state.currXArray.slice();\n\n      currXArray.push(_this.state.currX);\n\n      var currYArray = _this.state.currYArray.slice();\n\n      currYArray.push(_this.state.currY);\n\n      _this.setState({\n        prevXArray: prevXArray,\n        prevYArray: prevYArray,\n        currXArray: currXArray,\n        currYArray: currYArray\n      });\n    };\n\n    _this.handleReceivedDrawing = function (response) {\n      //console.log('receiving drawing info', response)\n      // this.draw(response)\n      for (var i = 0; i < response.currXArray.length; i++) {\n        _this.state.ctx.beginPath();\n\n        _this.state.ctx.moveTo(response.prevXArray[i], response.prevYArray[i]);\n\n        _this.state.ctx.lineTo(response.currXArray[i], response.currYArray[i]);\n\n        _this.state.ctx.strokeStyle = _this.state.x;\n        _this.state.ctx.lineWidth = _this.state.y;\n\n        _this.state.ctx.stroke();\n\n        _this.state.ctx.closePath();\n      }\n    };\n\n    _this.canvasRef = React.createRef();\n    _this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400,\n      // make this a prop\n      height: 400 // make this a prop\n      // guessAnswer: ''\n\n    };\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // getting ref to canvas html element w React ref, update state\n      var canvas = this.canvasRef.current;\n      var ctx = canvas.getContext('2d'); // set canvas width / height using hard-coded state\n\n      canvas.width = this.state.width;\n      canvas.height = this.state.height;\n      this.setState({\n        canvas: canvas,\n        ctx: ctx\n      }, // test data to fill the canvas w a rectangle\n      function () {\n        _this2.state.ctx.fillStyle = 'lightgray';\n\n        _this2.state.ctx.fillRect(20, 20, _this2.state.canvas.width, _this2.state.canvas.height);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.props.isDrawing) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(\"canvas\", {\n          ref: this.canvasRef,\n          onMouseMove: function onMouseMove(event) {\n            return _this3.handleMouseMoves(event, 'move');\n          },\n          onMouseDown: function onMouseDown(event) {\n            return _this3.handleMouseMoves(event, 'down');\n          },\n          onMouseUp: function onMouseUp(event) {\n            return _this3.handleMouseMoves(event, 'up');\n          },\n          onMouseOut: function onMouseOut(event) {\n            return _this3.handleMouseMoves(event, 'out');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(\"canvas\", {\n          ref: this.canvasRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return Canvas;\n}(React.Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Canvas.js"],"names":["React","Component","Fragment","ActionCableConsumer","API_ROOT","HEADERS","Canvas","props","handleMouseMoves","event","action","persist","findxy","sendDrawData","movement","currentGameId","gameId","prevXArray","state","prevYArray","currXArray","currYArray","fetch","method","headers","body","JSON","stringify","mouseAction","e","setState","prevX","currX","prevY","currY","clientX","canvas","offsetLeft","clientY","offsetTop","flag","dot_flag","ctx","beginPath","fillStyle","x","fillRect","closePath","draw","moveTo","lineTo","strokeStyle","lineWidth","y","stroke","slice","push","handleReceivedDrawing","response","i","length","canvasRef","createRef","drawingFlag","width","height","current","getContext","isDrawing"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT, HEADERS } from '../constants';\n// import Cable from './Cable';\n\n\nclass Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef()\n    this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400, // make this a prop\n      height: 400, // make this a prop\n      // guessAnswer: ''\n    }\n  }\n\n  componentDidMount() {\n    // getting ref to canvas html element w React ref, update state\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d')\n\n    // set canvas width / height using hard-coded state\n    canvas.width = this.state.width;\n    canvas.height = this.state.height;\n\n    this.setState(\n      {canvas, ctx},\n      // test data to fill the canvas w a rectangle\n      () => {\n        this.state.ctx.fillStyle = 'lightgray';\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\n    )\n  }\n\n  handleMouseMoves = (event, action) => {\n    event.persist()\n    //console.log('moving the mouse', action, event)\n    this.findxy(action, event)\n\n    // if (action !== 'up') {this.sendDrawData()}\n\n    // post updated state to API\n  }\n\n  sendDrawData = () => {\n    const movement = {\n      currentGameId: this.props.gameId,\n      prevXArray: this.state.prevXArray,\n      prevYArray: this.state.prevYArray,\n      currXArray: this.state.currXArray,\n      currYArray: this.state.currYArray,\n    }\n\n    fetch(API_ROOT + '/canvas', {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n      // .then(response)\n  }\n\n  findxy = (mouseAction, e) => {\n    if (mouseAction == 'down') {\n      this.setState(\n        (state) => {return {\n          prevX: state.currX,\n          prevY: state.currY,\n          currX: e.clientX - state.canvas.offsetLeft,\n          currY: e.clientY - state.canvas.offsetTop,\n          flag: true,\n          dot_flag: true\n        }},\n        () => {\n          if (this.state.dot_flag) {\n            this.state.ctx.beginPath();\n            this.state.ctx.fillStyle = this.state.x;\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\n            this.state.ctx.closePath();\n\n            this.setState({dot_flag: false})\n          }\n        }\n      )\n    } else if (mouseAction == 'up' || mouseAction == \"out\") {\n        this.setState({flag: false})\n        this.sendDrawData()\n    } else if (mouseAction == 'move' && this.state.flag) {\n      this.setState(\n        (state) => {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n          }\n        },\n        () => {\n          this.draw()\n        }\n      )\n    }\n  }\n\n  draw = () => {\n    this.state.ctx.beginPath();\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\n    this.state.ctx.stroke();\n    this.state.ctx.closePath();\n\n    // store all\n    const prevXArray = this.state.prevXArray.slice()\n    prevXArray.push(this.state.prevX)\n    const prevYArray = this.state.prevYArray.slice()\n    prevYArray.push(this.state.prevY)\n    const currXArray = this.state.currXArray.slice()\n    currXArray.push(this.state.currX)\n    const currYArray = this.state.currYArray.slice()\n    currYArray.push(this.state.currY)\n\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\n\n  }\n\n  handleReceivedDrawing = response => {\n    //console.log('receiving drawing info', response)\n    // this.draw(response)\n    for(let i=0; i < response.currXArray.length; i++) {\n      this.state.ctx.beginPath();\n      this.state.ctx.moveTo(response.prevXArray[i], response.prevYArray[i]);\n      this.state.ctx.lineTo(response.currXArray[i], response.currYArray[i]);\n      this.state.ctx.strokeStyle = this.state.x;\n      this.state.ctx.lineWidth = this.state.y;\n      this.state.ctx.stroke();\n      this.state.ctx.closePath();\n    }\n\n  }\n\n  render() {\n    if (this.props.isDrawing) {\n      return (\n        <Fragment>\n          <canvas\n           ref={this.canvasRef}\n           onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\n           onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\n           onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\n           onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\n         />\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          {/* <ActionCableConsumer\n            channel={{channel: 'CanvasDrawingsChannel', id:`${this.props.gameId}`}}\n            onReceived={this.handleReceivedDrawing}\n          /> */}\n          <canvas\n            ref={this.canvasRef}\n          />\n        </Fragment>\n      )\n    }\n\n  }}\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}