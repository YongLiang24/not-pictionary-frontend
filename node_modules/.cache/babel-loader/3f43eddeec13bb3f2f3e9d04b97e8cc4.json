{"ast":null,"code":"import _classCallCheck from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GuessList.js\";\nimport React, { Component, Fragment } from 'react';\nimport { API_ROOT, HEADERS } from '../constants';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\n\nvar GuessList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessList, _Component);\n\n  function GuessList(props) {\n    var _this;\n\n    _classCallCheck(this, GuessList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GuessList).call(this, props));\n\n    _this.handleReject = function (ev) {\n      fetch(API_ROOT + \"/game/\".concat(_this.props.gameId)).then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        console.log('updateMessage', json);\n\n        _this.setState({\n          rejectedGuesses: json\n        });\n      });\n    };\n\n    _this.updateMessage = function () {\n      fetch(API_ROOT + \"/game/\".concat(_this.props.gameId)).then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        console.log('updateMessage', json);\n\n        _this.setState({\n          guessList: json\n        });\n      }); // alert('We have a Winner, Thanks for playing.')\n      // setTimeout(window.location = 'http://localhost:3001/games', 3000)\n    };\n\n    _this.state = {\n      guessList: [],\n      rejectedGuesses: []\n    };\n    return _this;\n  }\n\n  _createClass(GuessList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // fetch(API_ROOT+`/game/${this.props.gameId}`)\n      // .then(resp => resp.json())\n      // .then(json => {\n      //   if (json) {\n      //   this.setState({\n      //     guessList: json,\n      //     rejectedGuesses: json\n      //   })}\n      // })\n      setInterval(this.updateMessage, 4000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.props.isDrawing) {\n        this.acc || (this.acc = null);\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, this.acc, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, \"Guess List\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, this.state.guessList.map(function (guess, idx) {\n          return React.createElement(\"li\", {\n            key: idx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, guess, React.createElement(\"button\", {\n            id: idx,\n            name: \"Accept\",\n            onClick: _this2.handleClick,\n            value: guess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, \"Accept\"), React.createElement(\"button\", {\n            id: idx,\n            name: \"Reject\",\n            onClick: _this2.handleReject,\n            value: guess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, \"Reject\"));\n        })));\n      } else {\n        this.acc || (this.acc = null);\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, this.acc, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Rejected Guess List\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, this.state.rejectedGuesses.map(function (guess, idx) {\n          return React.createElement(\"li\", {\n            key: idx,\n            style: {\n              textDecoration: 'line-through'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, guess);\n        })));\n      }\n    }\n  }]);\n\n  return GuessList;\n}(Component);\n\nexport default GuessList;","map":{"version":3,"sources":["/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GuessList.js"],"names":["React","Component","Fragment","API_ROOT","HEADERS","ActionCableConsumer","GuessList","props","handleReject","ev","fetch","gameId","then","resp","json","console","log","setState","rejectedGuesses","updateMessage","guessList","state","setInterval","isDrawing","acc","map","guess","idx","handleClick","textDecoration"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,cAAlC;AACA,SAASC,mBAAT,QAAoC,4BAApC;;IAEMC,S;;;;;AACJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAChB,mFAAMA,KAAN;;AADgB,UAqBnBC,YArBmB,GAqBJ,UAACC,EAAD,EAAQ;AACrBC,MAAAA,KAAK,CAACP,QAAQ,mBAAU,MAAKI,KAAL,CAAWI,MAArB,CAAT,CAAL,CACCC,IADD,CACM,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,OADV,EAECF,IAFD,CAEM,UAAAE,IAAI,EAAG;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,IAA7B;;AACA,cAAKG,QAAL,CAAc;AACZC,UAAAA,eAAe,EAAEJ;AADL,SAAd;AAGD,OAPD;AAUA,KAhCiB;;AAAA,UAkCrBK,aAlCqB,GAkCL,YAAK;AACnBT,MAAAA,KAAK,CAACP,QAAQ,mBAAU,MAAKI,KAAL,CAAWI,MAArB,CAAT,CAAL,CACCC,IADD,CACM,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,OADV,EAECF,IAFD,CAEM,UAAAE,IAAI,EAAG;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,IAA7B;;AACA,cAAKG,QAAL,CAAc;AACZG,UAAAA,SAAS,EAAEN;AADC,SAAd;AAGD,OAPD,EADmB,CAUnB;AACA;AACD,KA9CoB;;AAEhB,UAAKO,KAAL,GAAa;AACZD,MAAAA,SAAS,EAAE,EADC;AAEZF,MAAAA,eAAe,EAAE;AAFL,KAAb;AAFgB;AAMjB;;;;wCAEkB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,MAAAA,WAAW,CAAC,KAAKH,aAAN,EAAqB,IAArB,CAAX;AACD;;;6BA6BO;AAAA;;AACP,UAAI,KAAKZ,KAAL,CAAWgB,SAAf,EAA0B;AACxB,aAAKC,GAAL,KAAa,KAAKA,GAAL,GAAW,IAAxB;AACA,eACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKA,GADR,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKH,KAAL,CAAWD,SAAX,CAAqBK,GAArB,CAAyB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACxC,iBACE;AAAI,YAAA,GAAG,EAAEA,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAeD,KAAf,EACE;AACE,YAAA,EAAE,EAAEC,GADN;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAE,MAAI,CAACC,WAHhB;AAIE,YAAA,KAAK,EAAEF,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EASE;AACE,YAAA,EAAE,EAAEC,GADN;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAE,MAAI,CAACnB,YAHhB;AAIE,YAAA,KAAK,EAAEkB,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATF,CADF;AAmBE,SApBH,CADH,CAHF,CADF;AA8BD,OAhCD,MAgCO;AACL,aAAKF,GAAL,KAAa,KAAKA,GAAL,GAAW,IAAxB;AACA,eACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKA,GADR,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKH,KAAL,CAAWH,eAAX,CAA2BO,GAA3B,CAA+B,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAC9C,iBAAO;AAAI,YAAA,GAAG,EAAEA,GAAT;AAAc,YAAA,KAAK,EAAE;AAACE,cAAAA,cAAc,EAAE;AAAjB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwDH,KAAxD,CAAP;AACC,SAFF,CADH,CAHF,CADF;AAWD;AACF;;;;EAhGqBzB,S;;AAmGxB,eAAeK,SAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { API_ROOT, HEADERS } from '../constants';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\n\nclass GuessList extends Component {\n  constructor(props) {\n     super(props)\n     this.state = {\n      guessList: [],\n      rejectedGuesses: []\n     }\n   }\n\n  componentDidMount() {\n     // fetch(API_ROOT+`/game/${this.props.gameId}`)\n     // .then(resp => resp.json())\n     // .then(json => {\n     //   if (json) {\n     //   this.setState({\n     //     guessList: json,\n     //     rejectedGuesses: json\n     //   })}\n     // })\n     setInterval(this.updateMessage, 4000)\n   }\n\n  handleReject = (ev) => {\n    fetch(API_ROOT+`/game/${this.props.gameId}`)\n    .then(resp => resp.json())\n    .then(json =>{\n      console.log('updateMessage', json)\n      this.setState({\n        rejectedGuesses: json,\n      })\n    })\n\n\n   }\n\nupdateMessage = () =>{\n  fetch(API_ROOT+`/game/${this.props.gameId}`)\n  .then(resp => resp.json())\n  .then(json =>{\n    console.log('updateMessage', json)\n    this.setState({\n      guessList: json,\n    })\n  })\n\n  // alert('We have a Winner, Thanks for playing.')\n  // setTimeout(window.location = 'http://localhost:3001/games', 3000)\n}\n\n  render() {\n    if (this.props.isDrawing) {\n      this.acc || (this.acc = null)\n      return (\n        <Fragment>\n          {this.acc}\n          <h4>Guess List</h4>\n          <ul>\n            {this.state.guessList.map((guess, idx) => {\n              return (\n                <li key={idx}>{guess}\n                  <button\n                    id={idx}\n                    name='Accept'\n                    onClick={this.handleClick}\n                    value={guess}\n                  >\n                    Accept\n                  </button>\n                  <button\n                    id={idx}\n                    name='Reject'\n                    onClick={this.handleReject}\n                    value={guess}\n                  >\n                    Reject\n                  </button>\n                </li>\n              )})\n            }\n          </ul>\n        </Fragment>\n      )\n    } else {\n      this.acc || (this.acc = null)\n      return (\n        <Fragment>\n          {this.acc}\n          <h4>Rejected Guess List</h4>\n          <ul>\n            {this.state.rejectedGuesses.map((guess, idx) => {\n              return <li key={idx} style={{textDecoration: 'line-through'}}>{guess}</li>\n              })}\n          </ul>\n        </Fragment>\n      )\n    }\n  }\n}\n\nexport default GuessList\n"]},"metadata":{},"sourceType":"module"}