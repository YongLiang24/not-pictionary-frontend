{"ast":null,"code":"import _classCallCheck from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Canvas.js\";\nimport React, { Component, Fragment } from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT, HEADERS } from '../constants'; // import Cable from './Cable';\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Canvas, _React$Component);\n\n  function Canvas(props) {\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Canvas).call(this, props));\n\n    _this.intervalCanvasDraw = function () {\n      fetch('http://localhost:3000/canvas').then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        console.log('the returned movement', json[0]);\n\n        for (var i = 0; i < json[0].currXArray.length; i++) {\n          _this.state.ctx.beginPath();\n\n          _this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\n\n          _this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\n\n          _this.state.ctx.strokeStyle = _this.state.x;\n          _this.state.ctx.lineWidth = _this.state.y;\n\n          _this.state.ctx.stroke();\n\n          _this.state.ctx.closePath();\n        }\n      });\n    };\n\n    _this.handleMouseMoves = function (event, action) {\n      event.persist(); //console.log('moving the mouse', action, event)\n\n      _this.findxy(action, event); // if (action !== 'up') {this.sendDrawData()}\n      // post updated state to API\n\n    };\n\n    _this.sendDrawData = function () {\n      var movement = {\n        currentGameId: _this.props.gameId,\n        prevXArray: _this.state.prevXArray,\n        prevYArray: _this.state.prevYArray,\n        currXArray: _this.state.currXArray,\n        currYArray: _this.state.currYArray\n      };\n      fetch(API_ROOT + '/canvas/1', {\n        method: 'PATCH',\n        headers: HEADERS,\n        body: JSON.stringify(movement)\n      }); // .then(response)\n    };\n\n    _this.findxy = function (mouseAction, e) {\n      if (mouseAction == 'down') {\n        _this.setState(function (state) {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n            flag: true,\n            dot_flag: true\n          };\n        }, function () {\n          if (_this.state.dot_flag) {\n            _this.state.ctx.beginPath();\n\n            _this.state.ctx.fillStyle = _this.state.x;\n\n            _this.state.ctx.fillRect(_this.state.currX, _this.state.currY, 2, 2);\n\n            _this.state.ctx.closePath();\n\n            _this.setState({\n              dot_flag: false\n            });\n          }\n        });\n      } else if (mouseAction == 'up') {\n        _this.setState({\n          flag: false\n        });\n\n        _this.sendDrawData();\n      } else if (mouseAction == 'move' && _this.state.flag) {\n        _this.setState(function (state) {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop\n          };\n        }, function () {\n          _this.draw();\n        });\n      }\n    };\n\n    _this.draw = function () {\n      _this.state.ctx.beginPath();\n\n      _this.state.ctx.moveTo(_this.state.prevX, _this.state.prevY);\n\n      _this.state.ctx.lineTo(_this.state.currX, _this.state.currY);\n\n      _this.state.ctx.strokeStyle = _this.state.x; // update to not mutate state directly\n\n      _this.state.ctx.lineWidth = _this.state.y; // update to not mutate state directly\n\n      _this.state.ctx.stroke();\n\n      _this.state.ctx.closePath(); // store all\n\n\n      var prevXArray = _this.state.prevXArray.slice();\n\n      prevXArray.push(_this.state.prevX);\n\n      var prevYArray = _this.state.prevYArray.slice();\n\n      prevYArray.push(_this.state.prevY);\n\n      var currXArray = _this.state.currXArray.slice();\n\n      currXArray.push(_this.state.currX);\n\n      var currYArray = _this.state.currYArray.slice();\n\n      currYArray.push(_this.state.currY);\n\n      _this.setState({\n        prevXArray: prevXArray,\n        prevYArray: prevYArray,\n        currXArray: currXArray,\n        currYArray: currYArray\n      });\n    };\n\n    _this.handleDraw = function () {};\n\n    _this.canvasRef = React.createRef();\n    _this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400,\n      // make this a prop\n      height: 400,\n      // make this a prop\n      emptyArray: []\n    };\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // getting ref to canvas html element w React ref, update state\n      var canvas = this.canvasRef.current;\n      var ctx = canvas.getContext('2d'); // set canvas width / height using hard-coded state\n\n      canvas.width = this.state.width;\n      canvas.height = this.state.height;\n      this.setState({\n        canvas: canvas,\n        ctx: ctx\n      }, // test data to fill the canvas w a rectangle\n      function () {\n        _this2.state.ctx.fillStyle = 'lightgray';\n\n        _this2.state.ctx.fillRect(20, 20, _this2.state.canvas.width, _this2.state.canvas.height);\n      }); //setInterval(this.intervalCanvasDraw, 5000)\n\n      var movement = {\n        currentGameId: 1\n      };\n      fetch(API_ROOT + '/canvas/1', {\n        method: 'PATCH',\n        headers: HEADERS,\n        body: JSON.stringify(movement)\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        console.log('change currentGameId', json);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.props.isDrawing) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, React.createElement(\"canvas\", {\n          ref: this.canvasRef,\n          onMouseMove: function onMouseMove(event) {\n            return _this3.handleMouseMoves(event, 'move');\n          },\n          onMouseDown: function onMouseDown(event) {\n            return _this3.handleMouseMoves(event, 'down');\n          },\n          onMouseUp: function onMouseUp(event) {\n            return _this3.handleMouseMoves(event, 'up');\n          },\n          onMouseOut: function onMouseOut(event) {\n            return _this3.handleMouseMoves(event, 'out');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.handleClear,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"Clear\"));\n      } else {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, React.createElement(\"canvas\", {\n          ref: this.canvasRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.intervalCanvasDraw,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, \"Show Draw\"));\n      }\n    }\n  }]);\n\n  return Canvas;\n}(React.Component);\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/yong/new-pictionary/not-pictionary-frontend/src/components/Canvas.js"],"names":["React","Component","Fragment","ActionCableConsumer","API_ROOT","HEADERS","Canvas","props","intervalCanvasDraw","fetch","then","resp","json","console","log","i","currXArray","length","state","ctx","beginPath","moveTo","prevXArray","prevYArray","lineTo","currYArray","strokeStyle","x","lineWidth","y","stroke","closePath","handleMouseMoves","event","action","persist","findxy","sendDrawData","movement","currentGameId","gameId","method","headers","body","JSON","stringify","mouseAction","e","setState","prevX","currX","prevY","currY","clientX","canvas","offsetLeft","clientY","offsetTop","flag","dot_flag","fillStyle","fillRect","draw","slice","push","handleDraw","canvasRef","createRef","drawingFlag","width","height","emptyArray","current","getContext","isDrawing","handleClear"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT, HEADERS } from '../constants';\n// import Cable from './Cable';\n\n\nclass Canvas extends React.Component {\n  constructor (props) {\n    super(props);\n    this.canvasRef = React.createRef()\n    this.state = {\n      canvas: false,\n      ctx: false,\n      drawingFlag: false,\n      prevX: 0,\n      currX: 0,\n      prevY: 0,\n      currY: 0,\n      prevXArray: [],\n      prevYArray: [],\n      currXArray: [],\n      currYArray: [],\n      dot_flag: false,\n      x: 'black',\n      y: 2,\n      width: 400, // make this a prop\n      height: 400, // make this a prop\n      emptyArray : []\n    }\n  }\n\n  componentDidMount() {\n    // getting ref to canvas html element w React ref, update state\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d')\n\n    // set canvas width / height using hard-coded state\n    canvas.width = this.state.width;\n    canvas.height = this.state.height;\n\n    this.setState(\n      {canvas, ctx},\n      // test data to fill the canvas w a rectangle\n      () => {\n        this.state.ctx.fillStyle = 'lightgray';\n        this.state.ctx.fillRect(20, 20, this.state.canvas.width, this.state.canvas.height)}\n    )\n     //setInterval(this.intervalCanvasDraw, 5000)\n     const movement = {\n       currentGameId: 1\n     }\n     fetch(API_ROOT + '/canvas/1', {\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify(movement)\n     })\n     .then(resp => resp.json())\n     .then(json=>{\n       console.log('change currentGameId', json)\n     })\n\n  }\n\n  intervalCanvasDraw = () =>{\n    fetch('http://localhost:3000/canvas')\n    .then(resp => resp.json())\n    .then(json =>{\n      console.log('the returned movement',json[0])\n        for(let i=0; i < json[0].currXArray.length; i++) {\n          this.state.ctx.beginPath();\n          this.state.ctx.moveTo(json[0].prevXArray[i], json[0].prevYArray[i]);\n          this.state.ctx.lineTo(json[0].currXArray[i], json[0].currYArray[i]);\n          this.state.ctx.strokeStyle = this.state.x;\n          this.state.ctx.lineWidth = this.state.y;\n          this.state.ctx.stroke();\n          this.state.ctx.closePath();\n        }\n\n    })\n  }\n\n  handleMouseMoves = (event, action) => {\n    event.persist()\n    //console.log('moving the mouse', action, event)\n    this.findxy(action, event)\n\n    // if (action !== 'up') {this.sendDrawData()}\n\n    // post updated state to API\n  }\n\n  sendDrawData = () => {\n    const movement = {\n      currentGameId: this.props.gameId,\n      prevXArray: this.state.prevXArray,\n      prevYArray: this.state.prevYArray,\n      currXArray: this.state.currXArray,\n      currYArray: this.state.currYArray,\n    }\n\n    fetch(API_ROOT + '/canvas/1', {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n      // .then(response)\n  }\n\n  findxy = (mouseAction, e) => {\n    if (mouseAction == 'down') {\n      this.setState(\n        (state) => {return {\n          prevX: state.currX,\n          prevY: state.currY,\n          currX: e.clientX - state.canvas.offsetLeft,\n          currY: e.clientY - state.canvas.offsetTop,\n          flag: true,\n          dot_flag: true\n        }},\n        () => {\n          if (this.state.dot_flag) {\n            this.state.ctx.beginPath();\n            this.state.ctx.fillStyle = this.state.x;\n            this.state.ctx.fillRect(this.state.currX, this.state.currY, 2, 2);\n            this.state.ctx.closePath();\n\n            this.setState({dot_flag: false})\n          }\n        }\n      )\n    } else if (mouseAction == 'up') {\n        this.setState({flag: false})\n        this.sendDrawData()\n\n    } else if (mouseAction == 'move' && this.state.flag) {\n      this.setState(\n        (state) => {\n          return {\n            prevX: state.currX,\n            prevY: state.currY,\n            currX: e.clientX - state.canvas.offsetLeft,\n            currY: e.clientY - state.canvas.offsetTop,\n          }\n        },\n        () => {\n          this.draw()\n        }\n      )\n    }\n  }\n\n  draw = () => {\n    this.state.ctx.beginPath();\n    this.state.ctx.moveTo(this.state.prevX, this.state.prevY);\n    this.state.ctx.lineTo(this.state.currX, this.state.currY);\n    this.state.ctx.strokeStyle = this.state.x; // update to not mutate state directly\n    this.state.ctx.lineWidth = this.state.y; // update to not mutate state directly\n    this.state.ctx.stroke();\n    this.state.ctx.closePath();\n\n    // store all\n    const prevXArray = this.state.prevXArray.slice()\n    prevXArray.push(this.state.prevX)\n    const prevYArray = this.state.prevYArray.slice()\n    prevYArray.push(this.state.prevY)\n    const currXArray = this.state.currXArray.slice()\n    currXArray.push(this.state.currX)\n    const currYArray = this.state.currYArray.slice()\n    currYArray.push(this.state.currY)\n\n    this.setState({prevXArray, prevYArray, currXArray, currYArray})\n\n  }\n\n  // handleReceivedDrawing = response => {\n  //   //console.log('receiving drawing info', response)\n  //   // this.draw(response)\n  //   for(let i=0; i < response.currXArray.length; i++) {\n  //     this.state.ctx.beginPath();\n  //     this.state.ctx.moveTo(response.prevXArray[i], response.prevYArray[i]);\n  //     this.state.ctx.lineTo(response.currXArray[i], response.currYArray[i]);\n  //     this.state.ctx.strokeStyle = this.state.x;\n  //     this.state.ctx.lineWidth = this.state.y;\n  //     this.state.ctx.stroke();\n  //     this.state.ctx.closePath();\n  //   }\n  //\n  // }\n\n  handleDraw = ()=>{\n\n  }\n\n  render() {\n    if (this.props.isDrawing) {\n      return (\n        <Fragment>\n          <canvas\n            ref={this.canvasRef}\n            onMouseMove={(event) => this.handleMouseMoves(event, 'move')}\n            onMouseDown={(event) => this.handleMouseMoves(event, 'down')}\n            onMouseUp={(event) => this.handleMouseMoves(event, 'up')}\n            onMouseOut={(event) => this.handleMouseMoves(event, 'out')}\n          />\n          <button onClick={this.handleClear}>Clear</button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          {/* <ActionCableConsumer\n            channel={{channel: 'CanvasDrawingsChannel', id:`${this.props.gameId}`}}\n            onReceived={this.handleReceivedDrawing}\n          /> */}\n          <canvas\n            ref={this.canvasRef}\n          />\n          <button onClick={this.intervalCanvasDraw}>Show Draw</button>\n        </Fragment>\n      )\n    }\n\n  }}\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}