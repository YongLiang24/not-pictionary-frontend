{"ast":null,"code":"import _classCallCheck from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yong/new-pictionary/not-pictionary-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GuessList.js\";\nimport React, { Component, Fragment } from 'react';\nimport { API_ROOT, HEADERS } from '../constants';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\n\nvar GuessList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GuessList, _Component);\n\n  function GuessList(props) {\n    var _this;\n\n    _classCallCheck(this, GuessList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GuessList).call(this, props));\n\n    _this.handleClick = function (ev) {\n      // ev.persist()\n      var guessIdx = ev.target.id;\n      var guessAction = ev.target.name;\n      var guessText = ev.target.value;\n      var type = 'guessStatus';\n      fetch(API_ROOT + \"/game/\".concat(_this.props.gameId), {\n        method: 'PATCH',\n        headers: HEADERS,\n        body: JSON.stringify({\n          guessIdx: guessIdx,\n          guessAction: guessAction,\n          guessText: guessText,\n          type: type\n        })\n      }); // .then(response => response.json())\n      // .then(json => {\n      //   if (json.message == 'Wrong!') {\n      //     this.setState(prevState => ({\n      //       rejectedGuesses: [...prevState.rejectedGuesses, json.guessText]\n      //     })\n      //   )} else if (json.message == 'Correct!') {\n      //     this.props.endGame('rightAnswer')\n      //     alert('We have a Winner, Thanks for playing.')\n      //     setTimeout(window.location = 'http://localhost:3001/games', 3000)\n      //   }\n      // })\n    };\n\n    _this.updateList = function () {\n      fetch(API_ROOT + \"/game/\".concat(_this.props.gameId)).then(function (resp) {\n        return resp.json();\n      }).then(function (json) {\n        _this.setState({\n          guessList: json.guesses,\n          rejectedGuesses: json.rejectList,\n          guessValue: json.guessInput\n        });\n      });\n    };\n\n    _this.handleReject = function (ev) {\n      var sendReject = {\n        isReject: \"true\"\n      };\n      fetch(API_ROOT + \"/game/\".concat(_this.props.gameId), {\n        method: 'PATCH',\n        headers: HEADERS,\n        body: JSON.stringify(sendReject)\n      });\n    };\n\n    _this.state = {\n      guessList: [],\n      rejectedGuesses: [],\n      guessValue: ''\n    };\n    return _this;\n  }\n\n  _createClass(GuessList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var movement = {\n        isClear: \"true\"\n      };\n      fetch(API_ROOT + \"/game/\".concat(this.props.gameId), {\n        method: 'PATCH',\n        headers: HEADERS,\n        body: JSON.stringify(movement)\n      });\n      setInterval(this.updateList, 4000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.props.isDrawing) {\n        this.acc || (this.acc = null);\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.acc, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, \"Guess List\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, this.state.guessList.map(function (guess, idx) {\n          return React.createElement(\"li\", {\n            key: idx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, guess, React.createElement(\"button\", {\n            id: idx,\n            name: \"Accept\",\n            onClick: _this2.handleClick,\n            value: guess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, \"Accept\"), React.createElement(\"button\", {\n            id: idx,\n            name: \"Reject\",\n            onClick: _this2.handleClick,\n            value: guess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, \"Reject\"));\n        })));\n      } else {\n        this.acc || (this.acc = null);\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, this.acc, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"Rejected Guess List\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, this.state.rejectedGuesses.map(function (guess, idx) {\n          return React.createElement(\"li\", {\n            key: idx,\n            style: {\n              textDecoration: 'line-through'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }, guess);\n        })));\n      }\n    }\n  }]);\n\n  return GuessList;\n}(Component);\n\nexport default GuessList;","map":{"version":3,"sources":["/Users/yong/new-pictionary/not-pictionary-frontend/src/components/GuessList.js"],"names":["React","Component","Fragment","API_ROOT","HEADERS","ActionCableConsumer","GuessList","props","handleClick","ev","guessIdx","target","id","guessAction","name","guessText","value","type","fetch","gameId","method","headers","body","JSON","stringify","updateList","then","resp","json","setState","guessList","guesses","rejectedGuesses","rejectList","guessValue","guessInput","handleReject","sendReject","isReject","state","movement","isClear","setInterval","isDrawing","acc","map","guess","idx","textDecoration"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { API_ROOT, HEADERS } from '../constants';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\n\nclass GuessList extends Component {\n  constructor(props) {\n     super(props)\n     this.state = {\n      guessList: [],\n      rejectedGuesses: [],\n      guessValue: ''\n     }\n   }\n\n  componentDidMount() {\n    const movement = {\n      isClear: \"true\"\n    }\n    fetch(API_ROOT + `/game/${this.props.gameId}`, {\n      method: 'PATCH',\n      headers: HEADERS,\n      body: JSON.stringify(movement)\n    })\n\n    setInterval(this.updateList, 4000)\n   }\n\n  handleClick = (ev) => {\n     // ev.persist()\n     const guessIdx = ev.target.id\n     const guessAction = ev.target.name\n     const guessText = ev.target.value\n     const type = 'guessStatus'\n\n     fetch(API_ROOT+`/game/${this.props.gameId}`,{\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify({guessIdx, guessAction, guessText, type})\n     })\n      // .then(response => response.json())\n      // .then(json => {\n      //   if (json.message == 'Wrong!') {\n      //     this.setState(prevState => ({\n      //       rejectedGuesses: [...prevState.rejectedGuesses, json.guessText]\n      //     })\n      //   )} else if (json.message == 'Correct!') {\n      //     this.props.endGame('rightAnswer')\n      //     alert('We have a Winner, Thanks for playing.')\n      //     setTimeout(window.location = 'http://localhost:3001/games', 3000)\n      //   }\n      // })\n\n   }\n\n   updateList = ()=>{\n     fetch(API_ROOT+`/game/${this.props.gameId}`)\n     .then(resp => resp.json())\n     .then(json =>{\n       this.setState({\n         guessList: json.guesses,\n         rejectedGuesses: json.rejectList,\n         guessValue: json.guessInput\n       })\n     })\n   }\n\n   handleReject = (ev) =>{\n     const sendReject = {\n       isReject: \"true\"\n     }\n     fetch(API_ROOT + `/game/${this.props.gameId}`, {\n       method: 'PATCH',\n       headers: HEADERS,\n       body: JSON.stringify(sendReject)\n     })\n\n   }\n\n\n  render() {\n    if (this.props.isDrawing) {\n      this.acc || (this.acc = null)\n      return (\n        <Fragment>\n          {this.acc}\n          <h4>Guess List</h4>\n          <ul>\n            {this.state.guessList.map((guess, idx) => {\n              return (\n                <li key={idx}>{guess}\n                  <button\n                    id={idx}\n                    name='Accept'\n                    onClick={this.handleClick}\n                    value={guess}\n                  >\n                    Accept\n                  </button>\n                  <button\n                    id={idx}\n                    name='Reject'\n                    onClick={this.handleClick}\n                    value={guess}\n                  >\n                    Reject\n                  </button>\n                </li>\n              )})\n            }\n          </ul>\n        </Fragment>\n      )\n    } else {\n      this.acc || (this.acc = null)\n      return (\n        <Fragment>\n          {this.acc}\n          <h4>Rejected Guess List</h4>\n          <ul>\n            {this.state.rejectedGuesses.map((guess, idx) => {\n              return <li key={idx} style={{textDecoration: 'line-through'}}>{guess}</li>\n              })}\n          </ul>\n        </Fragment>\n      )\n    }\n  }\n}\n\nexport default GuessList\n"]},"metadata":{},"sourceType":"module"}